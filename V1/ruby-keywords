#ruby dict for afl
keyword_struct="struct"
keyword__ENCODING__="__ENCODING__"
keyword__LINE__="__LINE__"
keyword__FILE__="__FILE__"
keyword_BEGIN="BEGIN"
keyword_END="END"
keyword_alias="alias"
keyword_and="and"
keyword_begin="begin"
keyword_break="break"
keyword_case="case"
keyword_class="class"
keyword_def="def"
keyword_defined="defined"
keyword_do="do"
keyword_else="else"
keyword_elseif="elseif"
keyword_end="end"
keyword_ensure="ensure"
keyword_false="false"
keyword_for="for"
keyword_if="if"
keyword_in="in"
keyword_module="module"
keyword_next="next"
keyword_nil="nil"
keyword_not="not"
keyword_or="or"
keyword_redo="redo"
keyword_rescue="rescue"
keyword_retry="retry"
keyword_return="return"
keyword_self="self"
keyword_super="super"
keyword_then="then"
keyword_true="true"
keyword_undef="undef"
keyword_unless="unless"
keyword_until="until"
keyword_when="when"
keyword_while="while"
keyword_yield="yield"

object_array="Array"
object_object="Object"
object_Hash="Hash"
object_Module="Module"
object_String="String"
object_ThreadGroup="ThreadGroup"
object_Time="Time"

#arithmatic operators
op_add="+"
op_sub="-"
op_multi="*"
op_div="/"
op_mod="%"
op_exponent="**"

#comparison operators
op_comp_ee="=="
op_comp_ne="!="
op_comp_gt=">"
op_comp_lt="<"
op_comp_gte=">="
op_comp_lte="<="
op_combined="<=>"
op_eql="==="
op_rec_eql=".eql?"
op_obj_eql=".equal?"
op_bit_or_eql="||="

#assignment operators
op_assign="="
op_assign_add="+="
op_assign_sub="-="
op_assign_multi="*="
op_assign_div="/="
op_assign_mod="%="
op_assign_exp="**=

#bitwise operations
op_bit_and="&"
op_bit_or="|"
op_bit_xor="^"
op_bit_ones="~"
op_bit_shl="<<"
op_bit_shr=">>"

#logical operators
op_log_and="and"
op_log_or="or"
op_log_not="not"
op_log_and2="&&"
op_log_or2="||"
op_log_not2="!"

op_ternary="?"
op_range_inclusive=".."
op_range_exclusive="..."
op_defined="defined?"
misc_constant="::"
misc_1=" 1"
misc_a="a"
misc_array=" [1]"
misc_assign=" a=1"
misc_code_block=" {1}"
misc_colon_num=" 1:"
misc_colon_string=" 'a':"
misc_comma=" ,"
misc_comment_multiline_start="=begin"
misc_comment_multiline_end="=end"
misc_fn=" a()"
misc_parentheses=" ()"
misc_parentheses_1=" (1)"
misc_parentheses_a=" (a)"
misc_period="."
misc_regex=" /a/g"
misc_semicolon=" ;"
misc_string=" 'a'"
misc_new=".new"
